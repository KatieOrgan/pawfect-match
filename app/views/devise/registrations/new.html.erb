<div class="card-booking-signup d-flex flex-column align-items-center justify-content-center p-5" style="background-color: #FA5655;">
  <h3 class="login-text"><strong>SIGN UP</strong></h3>

<div class="card-booking mt-4 mb-2 p-4">
  <div class="form-action d-flex align-items-center justify-content-center">
    <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
      <%= devise_error_messages! %>

      <div class="d-flex justify-content-between m-2">
        <%= f.label :username %>
        <%= f.text_field :username, autofocus: true, autocomplete: "username" %>
      </div>

      <div class="d-flex justify-content-between m-2">
        <%= f.label :first_name %>
        <%= f.text_field :first_name %>
      </div>

      <div class="d-flex justify-content-between m-2">
        <%= f.label :last_name %>
        <%= f.text_field :last_name %>
      </div>

      <div class="d-flex justify-content-between m-2">
        <%= f.label :email %>
        <%= f.email_field :email, autocomplete: "email" %>
      </div>
      
      <div class="form-group">
        <%= f.label :location %>
        <%= f.text_field :location, class: "form-control", id: "user-location-input", autocomplete: "on" %>
        <button type="button" id="detect-location-btn" class="btn btn-secondary btn-sm mt-2">Use my current location</button>
      </div>
    
      <div class="d-flex justify-content-between m-2">
        <%= f.label :password %>
        <%= f.password_field :password, autocomplete: "new-password" %>
      </div>

      <div class="d-flex justify-content-between m-2">
        <%= f.label :password_confirmation, "Confirm Password" %>
        <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
      </div>

      <div class="m-2">
        <%= f.submit "Sign up" %>
      </div>

    <% end %>
    </div>
  </div>

    <div class="d-flex align-items-center justify-content-center mt-2">
      <%= render "devise/shared/links" %>
    </div>

</div>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&libraries=places"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const detectBtn = document.getElementById('detect-location-btn');
  const locationInput = document.getElementById('user-location-input');
  if (!detectBtn) return;

  detectBtn.addEventListener('click', function() {
    if ("geolocation" in navigator) {
      detectBtn.disabled = true;
      detectBtn.innerText = "Getting location...";

      navigator.geolocation.getCurrentPosition(function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        // Use Google Maps Geocoding API or Nominatim for free to convert lat/lng to address

        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
          .then(response => response.json())
          .then(data => {
            if (data && data.display_name) {
              locationInput.value = data.display_name;
            } else {
              alert("Could not determine address. Please enter manually.");
            }
            detectBtn.disabled = false;
            detectBtn.innerText = "Use my current location";
          })
          .catch(() => {
            alert("Address lookup failed. Please enter manually.");
            detectBtn.disabled = false;
            detectBtn.innerText = "Use my current location";
          });
      }, function(error) {
        alert("Unable to get your location. Please check permissions.");
        detectBtn.disabled = false;
        detectBtn.innerText = "Use my current location";
      });
    } else {
      alert("Geolocation is not supported by your browser.");
    }
  });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  var locationInput = document.getElementById('user-location-input'); // or your chosen ID
  if (locationInput && window.google && google.maps && google.maps.places) {
    var autocomplete = new google.maps.places.Autocomplete(locationInput, {
      types: ["geocode"],
      componentRestrictions: { country: "gb" } // or "uk", or remove if not needed
    });
    autocomplete.addListener("place_changed", function() {
      var place = autocomplete.getPlace();
      // You can use additional place info if needed
    });
  }
});
</script>